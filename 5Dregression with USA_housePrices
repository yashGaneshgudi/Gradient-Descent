import pandas as pd
import numpy as np

# Range of x-values from 0-180
iterations = 1000000000

data = pd.read_csv("USA_housePrices.csv")
features = ["bedrooms","bathrooms","sqft_living","sqft_lot","floors"]
x_train = data.loc[:, features]
y_train = data.loc[:, ["price"]]

x_train.to_csv("x_train.csv", index=True)
y_train.to_csv("y_train.csv", index=True)
dataLength = len(open("x_train.csv").readlines()) - 1
# Error Function
def errorFunction(m, c, id):
    error = 0
    for i in range(dataLength):
        error += (y_train["price"][i] - m * x_train[id][i] + c) ** 2
    return error / dataLength
# Derivatives
def dm(m, c, id):
    sum = 0
    for i in range(dataLength):
        sum += (m * x_train[id][i] + c - y_train["price"][i]) * x_train[id][i]
    return 2 * sum / dataLength

def dc(m, c, id):
    sum = 0
    for i in range(dataLength):
        sum += m * x_train[id][i] + c - y_train["price"][i]
    return 2 * sum / dataLength

def compare(new,old):
    if new < old:
        return 'IMPROVEMENT'
    if new == old:
        return 'SAME'
    else:
        return 'WORSE'


# Starting m,c value
m = 0
c = 0
m2 = 0
c2 = 0
m3 = 0
c3 = 0
m4 = 0
c4 = 0
m5 = 0
c5 = 0

# Gradient Descent
a = [0.0000001,0.0000001,0.0000001,0.0000001,0.0000001] #learningRate
mc = [['m','c'],['m2','c2'],['m3','c3'],['m4','c4'],['m5','c5']]
oldmc=[['oldm','oldc'],['oldm2','oldc2'],['oldm3','oldc3'],['oldm4','oldc4'],['oldm5','oldc5']]
for i in range(iterations):
    oldm=m
    oldc=c
    oldm2=m2
    oldc2=c2
    oldm3=m3
    oldc3 = c3
    oldm4=m4
    oldc4=c4
    oldm5=m5
    oldc5=c5
    m = m - dm(m, c, "bedrooms") * a[0]
    c = c - dc(m, c, "bedrooms") * a[0]
    m2 = m2 - dm(m2, c2, "bathrooms") *a[1]
    c2 = c2 - dc(m2, c2, "bathrooms") * a[1]
    m3 = m3 - dm(m3, c3, "sqft_living") * a[2]
    c3 = c3 - dc(m3, c3, "sqft_living") *a[2]
    m4 = m4 - dm(m4, c4, "sqft_lot") * a[3]
    c4 = c4 - dc(m4, c4, "sqft_lot") * a[3]
    m5 = m5 - dm(m5, c5, "floors") * a[4]
    c5 = c5 - dc(m5, c5, "floors") * a[4]
    print()
    print(i)
    print(m," ",m2," ",m3," ",m4," ",m5)
    print('C',c," ",c2," ",c3," ",c4," ",c5)
    print('m1c1',compare(errorFunction(m,c,'bedrooms'),errorFunction(oldm,oldc,'bedrooms')),' m2c2', compare(errorFunction(m2,c2,"bathrooms"),errorFunction(oldm2,oldc2,"bathrooms")) ,' m3c3 ', compare(errorFunction(m3,c3, "sqft_living"),errorFunction(oldm3,oldc3, "sqft_living")) ,' m4c4 ',compare(errorFunction(m4,c4, "sqft_lot"),errorFunction(oldm4,oldc4, "sqft_lot")) ,' m5c5 ', compare(errorFunction(m5,c5, "floors"),errorFunction(oldm5,oldc5, "floors")))
    print()
    for i in range(5):
        if compare(errorFunction(eval(mc[i][0]),eval(mc[i][1]),features[i]),errorFunction(eval(oldmc[i][0]),eval(oldmc[i][1]),features[i])) == 'WORSE':
            a[i]=a[i]/2
            print(a,'AMENDED ',features[i])
    print()




