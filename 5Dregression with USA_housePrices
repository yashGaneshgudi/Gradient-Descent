import pandas as pd
import numpy as np

# Range of x-values from 0-180
iterations = 10

data = pd.read_csv("USA_housePrices.csv")
features = ["bedrooms","bathrooms","sqft_living","sqft_lot","floors"]
x_train = data.loc[:, features]
y_train = data.loc[:, ["price"]]

x_train.to_csv("x_train.csv", index=True)
y_train.to_csv("y_train.csv", index=True)
dataLength = len(open("x_train.csv").readlines()) - 1
# Error Function
def errorFunction(m, c, id):
    error = 0
    for i in range(dataLength):
        error += (y_train["price"][i] - m * x_train[id][i] + c) ** 2
    return error / dataLength
# Derivatives
def dm(m, c, id):
    sum = 0
    for i in range(dataLength):
        sum += (m * x_train[id][i] + c - y_train["price"][i]) * x_train[id][i]
    return 2 * sum / dataLength

def dc(m, c, id):
    sum = 0
    for i in range(dataLength):
        sum += m * x_train[id][i] + c - y_train["price"][i]
    return 2 * sum / dataLength


# Starting m,c value
m = 0
c = 0
m2 = 0
c2 = 0
m3 = 0
c3 = 0
m4 = 0
c4 = 0
m5 = 0
c5 = 0

# Gradient Descent ["bedrooms","bathrooms","sqft_living","sqft_lot","floors"]
for i in range(iterations):
    m = m - dm(m, c, "bedrooms") * 0.000001
    c = c - dc(m, c, "bedrooms") * 0.0001
    m2 = m2 - dm(m2, c2, "bathrooms") * 0.000001
    c2 = c2 - dc(m2, c2, "bathrooms") * 0.0001
    m3 = m3 - dm(m3, c3, "sqft_living") * 0.000001
    c3 = c3 - dc(m3, c3, "sqft_living") * 0.0001        
    m4 = m4 - dm(m4, c4, "sqft_lot") * 0.000001
    c4 = c4 - dc(m4, c4, "sqft_lot") * 0.0001
    m5 = m5 - dm(m5, c5, "floors") * 0.000001
    c5 = c5 - dc(m5, c5, "floors") * 0.0001
    print(i)

print(m," ",m2," ",m3," ",m4," ",m5)
