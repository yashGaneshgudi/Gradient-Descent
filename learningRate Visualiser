from matplotlib import pyplot as plt
import numpy as np

#VISUALISE THE EFFECT OF ITERATIONS ON THE LEARNING RATE
iterations = int(input('Iterations: '))

database = [[0, 988], [1, -5361], [2, -3242], [3, 4318], [4, 2282], [5, -2643], [6, -1167], [7, 4489], [8, -4714], [9, -5777], [10, -5869], [11, 1229], [12, -12546], [13, 1709], [14, -4839], [15, -1840], [16, -3418], [17, -5790], [18, -8096], [19, -10135], [20, -11905], [21, -8096], [22, -9566], [23, -10180], [24, -7354], [25, -7740], [26, -13259], [27, -11488], [28, -8496], [29, -12103], [30, -19019], [31, -20685], [32, -9180], [33, -9762], [34, -18956], [35, -10809], [36, -22439], [37, -17728], [38, -10157], [39, -24410], [40, -14486], [41, -17176], [42, -21723], [43, -21874], [44, -21097], [45, -23120], [46, -25735], [47, -25516], [48, -28712], [49, -16187], [50, -20181], [51, -23865], [52, -24303], [53, -22567], [54, -26601], [55, -18886], [56, -26196], [57, -28255], [58, -33736], [59, -22152], [60, -27383], [61, -32055], [62, -24395], [63, -28117], [64, -29837], [65, -26931], [66, -37497], [67, -24682], [68, -32453], [69, -25106], [70, -27838], [71, -28364], [72, -36769], [73, -26318], [74, -39895], [75, -33793], [76, -42399], [77, -39467], [78, -40632], [79, -40518], [80, -32888], [81, -40460], [82, -38311], [83, -39189], [84, -34100], [85, -45531], [86, -39431], [87, -34589], [88, -33802], [89, -42284], [90, -37294], [91, -49505], [92, -48865], [93, -49971], [94, -38027], [95, -47499], [96, -44927], [97, -44229], [98, -52243], [99, -38395], [100, -46107], [101, -42360], [102, -41126], [103, -49217], [104, -54199], [105, -48441], [106, -44753], [107, -42995], [108, -44179], [109, -49731], [110, -56603], [111, -52815], [112, -48309], [113, -54910], [114, -54571], [115, -49004], [116, -60089], [117, -47872], [118, -58191], [119, -49864], [120, -52002], [121, -63372], [122, -59586], [123, -55660], [124, -52759], [125, -57459], [126, -53458], [127, -59879], [128, -52933], [129, -66628], [130, -53868], [131, -59851], [132, -61318], [133, -62947], [134, -58184], [135, -66121], [136, -58352], [137, -63955], [138, -68171], [139, -65563], [140, -71287], [141, -64160], [142, -67252], [143, -63929], [144, -64660], [145, -60049], [146, -68733], [147, -75788], [148, -66796], [149, -65618], [150, -66972], [151, -65714], [152, -66647], [153, -68076], [154, -76044], [155, -67181], [156, -77996], [157, -66831], [158, -74254], [159, -67974], [160, -74244], [161, -81630], [162, -71039], [163, -78393], [164, -77603], [165, -76461], [166, -73341], [167, -80299], [168, -82567], [169, -75485], [170, -74752], [171, -78918], [172, -85129], [173, -80415], [174, -81970], [175, -76843], [176, -88558], [177, -75084], [178, -89776], [179, -84827]]
mStatic=-469
cStatic=566
X=180

def errorFunction(m, c):
    error = 0
    for i in range(X):
        error += (database[i][1] - m * i - c) ** 2
    return error / X

def dm(m, c):
    sum = 0
    for i in range(X):
        sum += (m * i + c - database[i][1]) * i
    return 2 * sum / X

def de(m, c):
    sum = 0
    for i in range(X):
        sum += m * i + c - database[i][1]
    return 2 * sum / X

m = 1
c = 1

a=0
aValues = []
errorValues = []
# Gradient Descent
for i in range (10000):
    a+=0.000000001
    aValues.append(a)
    print(a/10000)
    currentError = float('inf')
    for i in range(iterations):

        m = m - dm(m, c) * a
        c = c - de(m, c) * a

        if errorFunction(m, c) < currentError:
            currentError = errorFunction(m, c)
    errorValues.append(currentError)
    plt.scatter(aValues,errorValues)
    plt.xlabel("Î±")
    plt.ylabel("Error")
    x = np.linspace(0, X)
    plt.show()









