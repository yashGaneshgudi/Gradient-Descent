import random
from matplotlib import pyplot as plt
import numpy as np

# Static m,c used to generate data
mStatic = random.randint(-1000, 1000)
cStatic = random.randint(-1000, 1000)
m2Static = random.randint(-1000, 1000)
c2Static = random.randint(-1000, 1000)

# Range of x-values from 0-180
X = 180
iterations = 100

# Data Generation with Noise(random function)

database = []
for i in range(X):
    # HINT To make the data more spread out increase the numbers inside the random function.
    y = mStatic * i + cStatic + random.randint(-7500, 7500)
    z = m2Static * i + c2Static + random.randint(-7500,7500)
    database.append([i, y, z])

# Error Function
def errorFunction(m, c, id):
    error = 0
    for i in range(X):
        error += (database[i][id] - m * i - c) ** 2
    return error / X

# Derivatives
def dm(m, c, id):
    sum = 0
    for i in range(X):
        sum += (m * i + c - database[i][id]) * i
    return 2 * sum / X
def dc(m, c, id):
    sum = 0
    for i in range(X):
        sum += m * i + c - database[i][id]
    return 2 * sum / X

# Starting m,c value
m = 1
c = 1
m2=1
c2=1

# Gradient Descent
for i in range(iterations):
    m = m - dm(m, c, 1) * 0.000001
    c = c - dc(m, c, 1) * 0.0001
    m2 = m2 - dm(m2, c2, 2) * 0.000001
    c2 = c2 - dc(m2, c2, 2) * 0.0001    

fig = plt.figure()
ax = fig.add_subplot(projection='3d')
ax.scatter(*zip(*database))

x = np.linspace(0, X)
plt.plot(x, mStatic * x + cStatic, m2Static * x + c2Static,"-r", label="Static")
plt.plot(x, m * x + c,m2 * x + c2, "-b", label="Prediction")
plt.legend()

plt.show()

print()
print('m1Static:',mStatic,' prediction ',m,'  accuracy ',(m-mStatic)/mStatic*100,)
print('m1Static:',m2Static,' prediction ',m2,'  accuracy ',(m2-m2Static)/m2Static*100,)

print('c1Static:',cStatic,' prediction ',c,'  accuracy ',(c-cStatic)/cStatic*100,)
print('c2Static:',c2Static,' prediction ',c2,'  accuracy ',(c2-c2Static)/c2Static*100,)
